demo()
install.packages("slidify")
add2 <-function(x,y){
x+y
}
add2(3,6)
x<-1:20
above(x,9)
above <-function(x,n){
use <- x > n
x[use]
}
above(x,9)
above <-function(x,n=10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
means
}
}
columnmean <- function(y, removeNA = TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i], na.rm=removeNA)
means
}
}
clear
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
seq(5, 10, length=30)
my_seq<-seq(5, 10, length=30)
length(my_seq)
my_seq2<-seq(1:length(myseq))
my_seq2<-seq(1:length(my_seq))
seq(1:length(my_seq))
seq(1:length(my_seq))
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,40)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2)each=10)
rep(c(0,1,2),each=10)
num_vet<-asnumeric(0.5,55,-10,6)
num_vet<-as.numeric(0.5,55,-10,6)
num_vet<-as.numeric(c(0.5,55,-10,6))
num_vet<-c(0.5,55,-10,6)
info()
?c
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect >= 6
swirl()
my_char<- c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char,"Belle")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!", sep=" ")
paste(c(1:3),c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
rm(num_vet)
q()
load("~/Desktop/Coursera/hw1_data.csv")
library(swirl)
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(a)]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<- c(11,2,NA)
names(vect2)<-c("foo","bar","norg")
names(vect2)<-c("foo","bar","norf")
indentical(vect,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8||6 !=8 && 4 >3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
cust06 <- read.csv("~/Desktop/Coursera/cust06.csv")
View(cust06)
stations<-c(cust06[[1]])
stations
stations<-c(cust06)
cust06
class(cust06)
c(cust06[1])
c(cust06[[1]])
c(cust06$stationnames)
c(cust06$stationname)
c(cust06$StationName)
rm(my_data,my_matrix,my_matrix2,my_na,my_vector)
x<-cust06[[1]]
x
class(x)
y<-c(x)
y
y<-as.character(x)
y
class(y)
paste(y,"|")
paste(y,"|",collapse="")
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
source('/var/folders/g_/l8rwybhn4jv0jlqhn3xg2bgw0000gp/T//RtmpDoA5AA/boring_function.R')
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
telegram("let's go","home!")
submit()
mad_libs("boston","rainy","shoe")
submit()
submit()
'I'%p% 'Love'%p%'R!'
'I' %p% 'Love '%p% 'R!'
'I' %p% 'Love'%p% "R!"
"I" %p% "Love" %p% "R!"
"I" %p% "love" %p% "R!"
cube <- function(x, n) {
x^3
}
cub(3)
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
z<-2
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
save.image("~/Desktop/Coursera/RProgCourseWork.RData")
library(datasets)
data(iris)
?iris
head(iris)
sapply(iris,mean)
sapply(iris,mean, na.rm=TRUE)
s<-split(iris,iris$Species)
s
sapply(s,mean, na.rm=TRUE)
sapply(s,mean,)
lapply(s,mean,)
lapply(s,mean,na.rm=TRUE)
na.rm
lapply(s,mean,na.rm=TRUE)
mapply(s,mean,na.rm=TRUE)
tapply(iris,mean)
lapply(s,colmeans, na.rm=TRUE)
lapply(s,colMeans, na.rm=TRUE)
s
?colMeans
colMeans(s,na.rm=TRUE)
lapply(s, function(x), colMeans(x),na.rm=TRUE)
lapply(s, function(x) colMeans(x),na.rm=TRUE)
lapply(s, function(x) colMeans(x[,1]),na.rm=TRUE)
?na.rm
mean(s[1,2])
mean(s[1,])
s[1,]
s
class(s)
s[1]
s[2]
s[3]
x<-s[3]
x
colMeans(x,na.rm=TRUE)
sapply(iris,mean)
class(x)
x<-c(s[3])
x
class(x)
x[1]
x[2]
head(iris)
sapply(iris,function (x) colMeans(x[c("Sepal.Length")],na.rm=TRUE))
class(iris)
tapply(iris,colMeans)
s<-split(iris,iris$Species)
lapply(s, function(x) colMeans(x["Sepal.Length"],na.rm=TRUE))
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
data(mtcars)
?mtcars
head(mtcars)
apply(mtcars[,1:4],1,mean)
apply(mtcars[,1:4],2,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
x<-sapply(split(mtcars$hp,mtcars$cyl),mean)
x[1]
x[3]-x[1]
x[1]-x[3]
debug(ls)
ls
?ls
setwd("~/ProgrammingAssignment2")
